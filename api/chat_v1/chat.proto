syntax = "proto3";

package chat_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/Murat993/chat-server/pkg/chat_v1;chat_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Chat API"
    version: "1.0.0"
    contact: {
      name: "Murat N"
      email: "murat@nyssambayev.dev"
    };
  };

  host: "localhost:8080",
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
};

service ChatV1 {
  // Создает новый чат. Принимает пустой запрос и возвращает ответ с идентификатором чата.
  rpc Create(google.protobuf.Empty) returns (CreateResponse){
    option (google.api.http) =  {
      post: "/chat/v1/create"
      body: "*"
    };
  };
  // Отправляет сообщение в чат. Принимает идентификатор чата и сообщение, возвращает пустой ответ.
  rpc SendMessage(SendMessageRequest) returns (google.protobuf.Empty){
    option (google.api.http) =  {
      post: "/chat/v1/send-message"
      body: "*"
    };
  };
  // Удаление чата
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty){
    option (google.api.http) =  {
      delete: "/chat/v1"
    };
  };

  // Подключается к чату. Принимает идентификатор чата и имя пользователя, возвращает поток сообщений.
  rpc ConnectChat (ConnectChatRequest) returns (stream Message);
}


// Определяет структуру сообщения, содержащую отправителя, текст сообщения и временную метку создания.
message Message {
  string from = 1; // Идентификатор/имя отправителя сообщения.
  string text = 2; // Текст сообщения.
  google.protobuf.Timestamp created_at = 3; // Временная метка создания сообщения.
}

// Определяет структуру ответа на создание чата, содержащую идентификатор созданного чата.
message CreateResponse {
  string chat_id = 1;
}

// Определяет структуру запроса на подключение к чату, содержащую идентификатор чата и имя пользователя.
message ConnectChatRequest {
  string chat_id = 1; // Идентификатор чата, к которому происходит подключение.
  string username = 2; // Имя пользователя, подключающегося к чату.
}

// Определяет структуру запроса на отправку сообщения, содержащую идентификатор чата и само сообщение.
message SendMessageRequest {
  string chat_id = 1; // Идентификатор чата, в который отправляется сообщение.
  Message message = 2; // Само сообщение, отправляемое в чат.
}

message DeleteRequest {
  int64 id = 1;
}
